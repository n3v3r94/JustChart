@using System.Web
@using Newtonsoft.Json;
@model HomePageConfig

@{
    ViewData["Title"] = "Home Page";

}

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.3/Chart.js"></script>
<script src="https://code.jquery.com/jquery-3.4.1.min.js"
        integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo="
        crossorigin="anonymous"></script>


<div class="row">
    <div class=" col-md-4">
        <canvas id="myChartAPI" width="400" height="400"></canvas>
    </div>
    <div class=" col-md-4">
        <canvas id="myChartAPI2" width="400" height="400"></canvas>
    </div>
    <div class=" col-md-4">
        <canvas id="myChartAPI3" width="400" height="400"></canvas>
    </div>
</div>


<script>

    $(document).ready(function () {
        var color = ['rgb(255, 99, 132,0.5)', 'rgb(255, 159, 64,0.5)', 'rgb(255, 205, 86,0.5)', 'rgb(75, 192, 192,0.5)', 'rgb(54, 162, 235,0.5)', 'rgb(153, 102, 255,0.5)', 'rgb(201, 203, 207,0.5)'];
        var borderColors = [
            '#f67019',
            '#4dc9f6',
            '#f53794',
            '#537bc4',
            '#acc236',
            '#166a8f',
            '#00a950',
            '#58595b',
            '#8549ba'
        ];
    var myChart;

    let chartConfiguration = @Html.Raw(Json.Serialize(Model));


    var options = {
        scales: {
            yAxes: [{
                ticks: {
                    beginAtZero: true
                }
            }]
        },
        title: {
            fontSize: 18,
            display: true,
            text: 'Charts of Doctors',
            position: 'top'
        }
    };

    $.ajax({
        url: chartConfiguration.config.dataSrc,
        type: chartConfiguration.config.requestType,
        dataType: "json",
        data: JSON.stringify( { "limit": 250, "offset": 0, "academicRankTypeIds": [1], "academicRankTypes": [{ "name": "Професор", "id": 1 }, { "name": "Доцент", "id": 2 }], "isHabilitated": true }),
        contentType: "application/json"
    }).done(function (data) {

        init();
        console.log(data);
        let resultFromConversionData = dataConversion(data);
        for (var j = 0; j < resultFromConversionData.length; j++) {

            var newDataset = {
                label: resultFromConversionData[j].label,
                labels: resultFromConversionData[j].label,
                backgroundColor: color[j%6],
                borderColor: borderColors[j%6],
                borderWidth: 2,
                data: [],
                spanGaps: true,
            };

            myChart.data.datasets.push(newDataset);

            myChart.data.datasets[j].data.push(resultFromConversionData[j].data);
        }

        myChart.update();
        });

    function dataConversion(data) {

        let dataSets = [];

        for (var j = 0; j < data.result.length; j++) {

            if (data.result[j].academicDegrees[0] == null || data.result[j].academicDegrees[0] =='undefined'  || data.result[j].academicDegrees[0].academicDegreeType === 'undefined' || data.result[j].academicDegrees[0].academicDegreeType === null
                || data.result[j].academicDegrees[0].academicDegreeType.alias === 'undefined' || data.result[j].academicDegrees[0].academicDegreeType.alias === null) {
                if (dataSets.findIndex(x => x.label === "No Information" ) === -1) {
                    let temp = { label: "No Information", data: 1 };
                    dataSets.push(temp);
                }
                if (!dataSets.findIndex(x => x.label === "No Information") !== -1) {
                    let index = dataSets.findIndex(x => x.label === "No Information");
                    dataSets[index].data = dataSets[index].data + 1;
                }
                continue
            }

            if (dataSets.findIndex(x => x.label === data.result[j].academicDegrees[0].academicDegreeType.alias) === -1) {
                let temp = { label: data.result[j].academicDegrees[0].academicDegreeType.alias, data: 1 };
                dataSets.push(temp);
                continue;
            }

            if (!dataSets.findIndex(x => x.label === data.result[j].academicDegrees[0].academicDegreeType.alias) !== -1) {
                let index = dataSets.findIndex(x => x.label === data.result[j].academicDegrees[0].academicDegreeType.alias);
                dataSets[index].data = dataSets[index].data + 1;
            }
        }

        return dataSets;
    }

    function init() {

        var ctx = document.getElementById('myChartAPI');
        myChart = new Chart(ctx, {
            type: chartConfiguration.config.typeOfChart,
            data: [{
                datasets: [{}]
            }],
            options: options
        });

    }
    });

</script>