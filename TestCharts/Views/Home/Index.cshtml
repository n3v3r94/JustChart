@using System.Web
@using Newtonsoft.Json;
@model HomePageConfig

@{
    ViewData["Title"] = "Home Page";

}

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.3/Chart.js"></script>
<script src="https://code.jquery.com/jquery-3.4.1.min.js"
        integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo="
        crossorigin="anonymous"></script>


<div class="row">
    <div class=" col-md-4">
        <canvas id="myChartAPI" width="400" height="400"></canvas>
    </div>
    <div class=" col-md-4">
        <canvas id="myChartAPI2" width="400" height="400"></canvas>
    </div>
    <div class=" col-md-4">
        <canvas id="myChartAPI3" width="400" height="400"></canvas>
    </div>
</div>


<script>
    var myChart;

    let chartConfiguration = @Html.Raw(Json.Serialize(Model));

    var emptyDataset = {
        label: "Employee2",
        fill: true,
        lineTension: 0.1,
        backgroundColor: "rgba(247, 0, 0,0.4)",
        borderColor: "green", // The main line color
        borderCapStyle: 'square',
        pointBorderColor: "white",
        pointBackgroundColor: "green",
        pointBorderWidth: 1,
        pointHoverRadius: 8,
        pointHoverBackgroundColor: "yellow",
        pointHoverBorderColor: "green",
        pointHoverBorderWidth: 2,
        pointRadius: 4,
        pointHitRadius: 10,
        data: [],
        spanGaps: true,
    }

    var data = {
        labels: [],
        datasets: [{
            label: "Employee",
            fill: true,
            lineTension: 0.1,
            backgroundColor: "rgba(0,255,0,0.4)",
            borderColor: "green", // The main line color
            borderCapStyle: 'square',
            pointBorderColor: "white",
            pointBackgroundColor: "green",
            pointBorderWidth: 1,
            pointHoverRadius: 8,
            pointHoverBackgroundColor: "yellow",
            pointHoverBorderColor: "green",
            pointHoverBorderWidth: 2,
            pointRadius: 4,
            pointHitRadius: 10,
            data: [],
            spanGaps: true,
        }]
    };



    var options = {
        scales: {
            yAxes: [{
                ticks: {
                    beginAtZero: true
                }
            }]
        },
        title: {
            fontSize: 18,
            display: true,
            text: 'Test bar char',
            position: 'bottom'
        }
    };

    //if y
    //function dataConversion(data) {

    //    $.each(data, function (index, value) {
    //        chartData.labels.push(value[chartConfiguration.config.dataY]);
    //        chartData.data.push(value[chartConfiguration.config.dataX]);
    //    });
    //    return chartData;
    //}


    function init() {

        var ctx = document.getElementById('myChartAPI');
        myChart = new Chart(ctx, {
            type: chartConfiguration.config.typeOfChart,
            data: data,
            options: options
        });

    }


    $(document).ready(function () {

        init();
        //get data from API
        if (chartConfiguration.config.isPagination === true) {

            for (var index = chartConfiguration.config.pageStart; index <= chartConfiguration.config.pageEnd; index++) {

                let dataScrUrl = chartConfiguration.config.dataSrc + "?" + chartConfiguration.config.pageParametarName + "=" + index;

                $.get(dataScrUrl, function (result) {
                    console.log(result.page)
                    if (result.page == 3) {
                        myChart.data.datasets.push(emptyDataset);
                        for (var j = 0; j < result.data.length; j++) {

                            myChart.data.labels.push(result.data[j][chartConfiguration.config.dataY]);
                            myChart.data.datasets[1].data.push(result.data[j][chartConfiguration.config.dataX]);
                        }

                    }
                    else {
                        for (var i = 0; i < result.data.length; i++) {
                            myChart.data.labels.push(result.data[i][chartConfiguration.config.dataY]);
                            myChart.data.datasets[0].data.push(result.data[i][chartConfiguration.config.dataX]);
                        }
                    }


                myChart.update();

            }).done(function (result) {

                console.log("success: do something")

            });
            }

        }

    });





</script>